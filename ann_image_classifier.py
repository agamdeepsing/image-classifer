# -*- coding: utf-8 -*-
"""ann image classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17qvPsugvKgN0mJ-9w077sGC9bXnatFSl
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import tensorflow as tf
import seaborn as sns

mnist = tf.keras.datasets.mnist

mnist

(X_train_full,y_train_full),(X_test,y_test) = mnist.load_data()

X_train_full

X_train_full.shape

X_train_full[5000]

plt.imshow(X_train_full[7000],cmap='binary')
plt.axis('off')
plt.show()

plt.figure(figsize=(12,12))
sns.heatmap(X_train_full[9000],annot=True,cmap='binary')

X_valid,X_train = X_train_full[:5000] / 255., X_train_full[5000:] / 255.
y_valid,y_train = y_train_full[:5000], y_train_full[5000:]

X_test = X_test / 255.

print(X_valid.shape)
print(X_train.shape)
print(y_train.shape)
print(y_valid.shape)

plt.figure(figsize=(15,15))
sns.heatmap(X_train[1000],annot=True,cmap='binary')

LAYERS = [tf.keras.layers.Flatten(input_shape=[28,28],name='inputlayer'),tf.keras.layers.Dense(300,activation='relu',name ='hiddenlayer1'),tf.keras.layers.Dense(100,activation='relu',name ='hiddenlayer2'),tf.keras.layers.Dense(10,activation='softmax',name ='outputlayer')]

model_clf = tf.keras.models.Sequential(LAYERS)

model_clf.summary()

LOSS_FUNCTION = "sparse_categorical_crossentropy"
OPTIMIZER='ADAM'
METRICS = ["accuracy"]

model_clf.compile(loss=LOSS_FUNCTION,optimizer = OPTIMIZER,metrics = METRICS)

hidden1 = model_clf.layers[1]

weight,biases = hidden1.get_weights()

EPOCHS = 5
VALIDATION_SET = (X_valid,y_valid)
history = model_clf.fit(X_train,y_train,epochs=EPOCHS,validation_data=VALIDATION_SET)

import time
import os

def saveModel_path(model_dir="/SAVED_MODELS/"):
  os.makedirs(model_dir,exist_ok= True)
  fileName=time.strftime("Model_%Y_%m_%d_%H_%M_%S_.h5")
  model_path = os.path.join(model_dir,fileName)
  print(f"model will be saved at the following location\n{model_path}")
  return model_path

model_clf.save(saveModel_path())

history.params

pd.DataFrame(history.history)

pd.DataFrame(history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0,1)
plt.show()

model_clf.evaluate(X_test,y_test)[1]

prediction = model_clf.predict(X_test[:3])

prediction

y_prob = prediction[0]

np.argmax(y_prob.round(5))

y_prob = prediction[1]

np.argmax(y_prob)

model_clf.predict(X_test)

#tensorboard
import time

def get_log_path(log_dir="/content/logs/fit"):
    fileName = time.strftime("log_%Y_%m_%d_%H_%M_%S")    
    log_path = os.path.join(log_dir, fileName)
    print(f"saving logs at:\n{log_path}")
    return log_path

log_dir = get_log_path()

tensorboard_callback =tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

EPOCHS=5
VALIDATION_SET=(X_valid,y_valid)
history=model_clf.fit(X_train,y_train,epochs=EPOCHS,validation_data=VALIDATION_SET,callbacks=[tensorboard_callback])

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs/fit

